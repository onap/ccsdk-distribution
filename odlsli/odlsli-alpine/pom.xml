<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.onap.ccsdk.distribution</groupId>
        <artifactId>distribution-odlsli</artifactId>
        <version>1.2.0-SNAPSHOT</version>
    </parent>

    <artifactId>distribution-odlsli-alpine</artifactId>
    <packaging>pom</packaging>

    <name>ccsdk-distribution :: odlsli-alpine</name>
    <description>Creates Alpine-based ODLSLI Docker container</description>
    <organization>
        <name>openECOMP</name>
    </organization>

    <properties>
        <base.image.name>onap/ccsdk-odl-silicon-alpine-image</base.image.name>
        <image.name>onap/ccsdk-odlsli-alpine-image</image.name>

        <ccsdk.project.version>${project.version}</ccsdk.project.version>
        <maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>
	    <ccsdk.build.timestamp>${maven.build.timestamp}</ccsdk.build.timestamp>

        <docker.verbose>true</docker.verbose>

        <docker.buildArg.https_proxy>${https_proxy}</docker.buildArg.https_proxy>
        <opendaylight.root>opt/opendaylight</opendaylight.root>

        <ansible.gpg.key>93C4A3FD7BB9C367</ansible.gpg.key>
        <!-- ODL Features Boot -->
        <extra.odl.features>
            odl-restconf-all,odl-mdsal-all,odl-mdsal-apidocs,odl-daexim-all,odl-restconf-nb-rfc8040
        </extra.odl.features>
        <!-- SLI Features Boot -->
        <ccsdk.sli.features>
            ccsdk-sli-core-all,ccsdk-sli-adaptors-all,ccsdk-sli-northbound-all,ccsdk-sli-plugins-all
        </ccsdk.sli.features>
        <!-- SLI Features Repositories -->
        <ccsdk.sli.features.repo>
            mvn:org.onap.ccsdk.sli.core/ccsdk-sli-core-all/${resolvedVersion.slicore-features-installer}/xml/features,\
            mvn:org.onap.ccsdk.sli.adaptors/ccsdk-sli-adaptors-all/${resolvedVersion.sliadaptors-features-installer}/xml/features,\
            mvn:org.onap.ccsdk.sli.northbound/ccsdk-sli-northbound-all/${resolvedVersion.slinorthbound-features-installer}/xml/features,\
            mvn:org.onap.ccsdk.sli.plugins/ccsdk-sli-plugins-all/${resolvedVersion.sliplugins-features-installer}/xml/features
        </ccsdk.sli.features.repo>
        <docker.autoCreateCustomNetworks>true</docker.autoCreateCustomNetworks>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>dependencies</artifactId>
            <version>${project.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>dblib-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>filters-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>sli-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>sliapi-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>sliPluginUtils-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>utils-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>slicore-features-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>aai-service-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>ansible-adaptor-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>base-http-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>mdsal-resource-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors.messagerouter</groupId>
            <artifactId>publisher.installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>netbox-client-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>resource-assignment-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>saltstack-adaptor-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>sql-resource-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>sliadaptors-features-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.northbound</groupId>
            <artifactId>asdcApi-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.northbound</groupId>
            <artifactId>dataChange-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.northbound</groupId>
            <artifactId>lcm-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.northbound</groupId>
            <artifactId>slinorthbound-features-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>properties-node-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>restapi-call-node-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>template-node-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>restconf-client-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>sshapi-call-node-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>sliplugins-features-installer</artifactId>
            <version>${ccsdk.sli.version}</version>
            <type>zip</type>
            <classifier>repo</classifier>
        </dependency>
    </dependencies>

    <build>
        <plugins>
          
            <plugin>
                <groupId>org.codehaus.groovy.maven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>derive-resolved-versions</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                for (art in project.getArtifacts())
                                    project.properties['resolvedVersion.' + art.getArtifactId()] = art.getVersion()
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>derive-docker-tags</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>${basedir}/../../src/main/scripts/TagSnapshotVersion.groovy</source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>copy-dockerfile</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/docker</directory>
                                    <includes>
                                        <include>Dockerfile</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-scripts</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/bin</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/scripts</directory>
                                    <includes>
                                        <include>*.sh</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-odl-resources</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/resources</directory>
                                    <includes>
                                        <include>idmlight.db.mv.db</include>
                                        <include>org.ops4j.pax.logging.cfg</include>
                                        <include>install_ccsdk.yml</include>
                                        <include>ansible-sources.list</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-config</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/resources</directory>
                                    <includes>
                                        <include>org.ops4j.pax.logging.cfg</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-data</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/data</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/resources</directory>
                                    <includes>
                                        <include>*.dump</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-properties</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/data/properties
                            </outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/properties</directory>
                                    <includes>
                                        <include>*.properties</include>
                                        <include>*.vt</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-keystores</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/data/stores</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/stores</directory>
                                    <includes>
                                        <include>*.jks</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.0.2</version>
                <executions>
                    <execution>
                        <id>unpack features</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <excludeTransitive>true</excludeTransitive>
                        </configuration>
                    </execution>
                    <execution>
                        <id>unpack dgs</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>platform-logic-installer</artifactId>
                                    <version>${project.version}</version>
                                    <type>zip</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.8</version>
                <executions>
                    <execution>
                        <id>change-shell-permissions</id>
                        <phase>process-sources</phase>
                        <configuration>
                            <target>
                                <chmod dir="${basedir}/target/docker-stage/opt/onap/ccsdk" perm="+x" includes="**/*.sh"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <skipITs>true</skipITs>
                </configuration>
            </plugin>
        </plugins>
        <extensions>
            <extension><!-- this extension is required by wagon in order to pass the proxy -->
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-http-lightweight</artifactId>
                <version>2.2</version>
            </extension>
        </extensions>
    </build>

    <profiles>
        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <skipITs>false</skipITs>
                            <environmentVariables>
                                <ODLSLI_PORT>${odlsli.port}</ODLSLI_PORT>
                            </environmentVariables>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.34.0</version>
                        <inherited>false</inherited>
                        <configuration>
                            <images>
                                <image>
                                    <name>${image.name}</name>
                                    <build>
                                        <cleanup>try</cleanup>
                                        <noCache>true</noCache>
                                        <contextDir>${basedir}/target/docker-stage</contextDir>
                                        <dockerFile>Dockerfile</dockerFile>
                                        <tags>
                                            <tag>${project.docker.latestminortag.snapshot.version}</tag>
                                            <tag>${project.docker.latestfulltag.snapshot.version}</tag>
                                            <tag>${project.docker.latesttagtimestamp.snapshot.version}</tag>
                                        </tags>
                                    </build>
                                </image>
                            </images>
                            <verbose>${docker.verbose}</verbose>
                            <skipPush>${docker.skip.push}</skipPush>
                        </configuration>
                        <executions>
                            <execution>
                                <id>build-push-images</id>
                                <goals>
                                    <goal>build</goal>
                                    <goal>push</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

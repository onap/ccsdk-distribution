<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.onap.ccsdk.parent</groupId>
        <artifactId>odlparent-lite</artifactId>
        <version>2.1.0</version>
        <relativePath/>
    </parent>

    <groupId>org.onap.ccsdk.distribution</groupId>
    <artifactId>distribution-odlsli-alpine</artifactId>
    <version>1.1.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>ccsdk-distribution :: odlsli-alpine</name>
    <description>Creates Alpine-based ODLSLI Docker container</description>
    <organization>
        <name>openECOMP</name>
    </organization>

    <properties>
        <base.image.name>onap/ccsdk-odl-sodium-alpine-image</base.image.name>
        <image.name>onap/ccsdk-odlsli-alpine-image</image.name>
        <ccsdk.project.version>${project.version}</ccsdk.project.version>
	<ccsdk.build.timestamp>${maven.build.timestamp}</ccsdk.build.timestamp>
	<uniquedockertag>${env.UNIQUE_DOCKER_TAG}</uniquedockertag>
        <docker.buildArg.https_proxy>${https_proxy}</docker.buildArg.https_proxy>
        <maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>
        <opendaylight.root>opt/opendaylight</opendaylight.root>
        <docker.push.phase>deploy</docker.push.phase>
        <docker.verbose>true</docker.verbose>
        <ansible.gpg.key>93C4A3FD7BB9C367</ansible.gpg.key>
        <odl.features.extra>odl-restconf-all,odl-mdsal-all,odl-mdsal-apidocs, odl-daexim-all, odl-restconf-nb-rfc8040
        </odl.features.extra>
        <ccsdk.odl.features>
            ccsdk-sli-core-all,ccsdk-sli-adaptors-all,ccsdk-sli-northbound-all,ccsdk-sli-plugins-all,ccsdk-features-all
        </ccsdk.odl.features>
        <odl.boot.features.extra>${odl.features.extra},${ccsdk.odl.features}</odl.boot.features.extra>

        <ccsdk.features.version>1.1.0</ccsdk.features.version>
        <ccsdk.sli.core.version>1.1.0</ccsdk.sli.core.version>
        <ccsdk.sli.adaptors.version>1.1.0</ccsdk.sli.adaptors.version>
        <ccsdk.sli.northbound.version>1.1.0</ccsdk.sli.northbound.version>
        <ccsdk.sli.plugins.version>1.1.0</ccsdk.sli.plugins.version>
        <ccsdk.oran.a1adapter.version>1.1.0</ccsdk.oran.a1adapter.version>
        <docker.autoCreateCustomNetworks>true</docker.autoCreateCustomNetworks>
</properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>dependencies</artifactId>
            <version>${project.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>

        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>dblib-installer</artifactId>
            <version>${ccsdk.sli.core.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>filters-installer</artifactId>
            <version>${ccsdk.sli.core.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>sli-installer</artifactId>
            <version>${ccsdk.sli.core.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>sliapi-installer</artifactId>
            <version>${ccsdk.sli.core.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>sliPluginUtils-installer</artifactId>
            <version>${ccsdk.sli.core.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>utils-installer</artifactId>
            <version>${ccsdk.sli.core.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.core</groupId>
            <artifactId>slicore-features-installer</artifactId>
            <version>${ccsdk.sli.core.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>aai-service-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>ansible-adapter-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>base-http-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>mdsal-resource-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors.messagerouter</groupId>
            <artifactId>publisher.installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>netbox-client-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>resource-assignment-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>saltstack-adapter-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>sql-resource-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.adaptors</groupId>
            <artifactId>sliadaptors-features-installer</artifactId>
            <version>${ccsdk.sli.adaptors.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>

        <dependency>
            <groupId>org.onap.ccsdk.sli.northbound</groupId>
            <artifactId>asdcApi-installer</artifactId>
            <version>${ccsdk.sli.northbound.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.northbound</groupId>
            <artifactId>dataChange-installer</artifactId>
            <version>${ccsdk.sli.northbound.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.northbound</groupId>
            <artifactId>lcm-installer</artifactId>
            <version>${ccsdk.sli.northbound.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.northbound</groupId>
            <artifactId>slinorthbound-features-installer</artifactId>
            <version>${ccsdk.sli.northbound.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>properties-node-installer</artifactId>
            <version>${ccsdk.sli.plugins.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>restapi-call-node-installer</artifactId>
            <version>${ccsdk.sli.plugins.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>template-node-installer</artifactId>
            <version>${ccsdk.sli.plugins.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>restconf-client-installer</artifactId>
            <version>${ccsdk.sli.plugins.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>sshapi-call-node-installer</artifactId>
            <version>${ccsdk.sli.plugins.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.sli.plugins</groupId>
            <artifactId>sliplugins-features-installer</artifactId>
            <version>${ccsdk.sli.plugins.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.features</groupId>
            <artifactId>features-installer</artifactId>
            <version>${ccsdk.features.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.features.sdnr.wt</groupId>
            <artifactId>sdnr-wt-feature-aggregator-installer</artifactId>
            <version>${ccsdk.features.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.features</groupId>
            <artifactId>aafshiro-installer</artifactId>
            <version>${ccsdk.features.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.features.sdnr.northbound</groupId>
            <artifactId>sdnr-northbound-features-installer</artifactId>
            <version>${ccsdk.features.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.oran</groupId>
            <artifactId>a1-adapter-northbound-installer</artifactId>
            <version>${ccsdk.oran.a1adapter.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.features.sdnr.northbound</groupId>
            <artifactId>oofpcipoc-installer</artifactId>
            <version>${ccsdk.features.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.oran</groupId>
            <artifactId>a1-adapter-installer</artifactId>
            <version>${ccsdk.oran.a1adapter.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.features.sdnr.northbound</groupId>
            <artifactId>CMNotify-installer</artifactId>
            <version>${ccsdk.features.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
        <dependency>
            <groupId>org.onap.ccsdk.features.sdnr.northbound</groupId>
            <artifactId>ranSlice-installer</artifactId>
            <version>${ccsdk.features.version}</version>
            <classifier>repo</classifier>
            <type>zip</type>
        </dependency>
    </dependencies>

    <build>
        <extensions>
            <extension>
                <!-- this extension is required by wagon in order to pass the proxy -->
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-http-lightweight</artifactId>
                <version>2.2</version>
            </extension>
        </extensions>
        <plugins>


            <plugin>
                <groupId>org.codehaus.groovy.maven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>${basedir}/../../src/main/scripts/TagSnapshotVersion.groovy</source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>copy-dockerfile</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals><!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/docker</directory>
                                    <includes>
                                        <include>Dockerfile</include>
                                    </includes>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <execution>
                        <id>copy-scripts</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals><!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/bin</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/scripts</directory>
                                    <includes>
                                        <include>*.sh</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <execution>
                        <id>copy-odl-resources</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals><!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/resources</directory>
                                    <includes>
                                        <include>idmlight.db.mv.db</include>
                                        <include>org.ops4j.pax.logging.cfg</include>
                                        <include>install_ccsdk.yml</include>
                                        <include>ansible-sources.list</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-config</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals><!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/resources</directory>
                                    <includes>
                                        <include>org.ops4j.pax.logging.cfg</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-data</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals><!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/data</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/resources</directory>
                                    <includes>
                                        <include>*.dump</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-properties</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals><!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/data/properties
                            </outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/properties</directory>
                                    <includes>
                                        <include>*.properties</include>
                                        <include>*.vt</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-keystores</id>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals><!-- here the phase you need -->
                        <phase>validate</phase>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk/data/stores</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>../src/main/stores</directory>
                                    <includes>
                                        <include>*.jks</include>
                                    </includes>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.0.2</version>
                <executions>
                    <execution>
                        <id>unpack features</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage</outputDirectory>
                            <excludeTransitive>true</excludeTransitive>
                        </configuration>
                    </execution>
                    <execution>
                        <id>unpack dgs</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/docker-stage/opt/onap/ccsdk</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>platform-logic-installer</artifactId>
                                    <version>${project.version}</version>
                                    <type>zip</type>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.5.0</version>
                <executions>

                    <execution>
                        <id>change shell permissions</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>/usr/bin/find</executable>
                            <arguments>
                                <argument>${basedir}/target/docker-stage/opt/onap/ccsdk</argument>
                                <argument>-name</argument>
                                <argument>*.sh</argument>
                                <argument>-exec</argument>
                                <argument>chmod</argument>
                                <argument>+x</argument>
                                <argument>{}</argument>
                                <argument>;</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                  <execution>
                    <goals>
                      <goal>integration-test</goal>
                      <goal>verify</goal>
                    </goals>
                  </execution>
                </executions>
                <configuration>
                  <skipITs>true</skipITs>
                </configuration>
              </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                          <execution>
                            <goals>
                              <goal>integration-test</goal>
                              <goal>verify</goal>
                            </goals>
                          </execution>
                        </executions>
                        <configuration>
                          <skipITs>false</skipITs>
                          <environmentVariables>
                            <ODLSLI_PORT>${odlsli.port}</ODLSLI_PORT>
                          </environmentVariables>
                        </configuration>
                      </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.28.0</version>
                        <inherited>false</inherited>
                        <configuration>
                            <images>
                                <image>
                                    <name>${image.name}</name>
                                    <build>
                                        <cleanup>try</cleanup>
                                        <dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
                                        <dockerFile>Dockerfile</dockerFile>
                                        <tags>
                                            <tag>${project.docker.latestminortag.snapshot.version}</tag>
                                            <tag>${project.docker.latestfulltag.snapshot.version}</tag>
                                            <tag>${project.docker.latesttagtimestamp.snapshot.version}</tag>
                                            <tag>${project.docker.uniquedockertag.snapshot.version}</tag>
				    </tags>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>generate-images</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>start-it-instance</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>mariadb:10.5</name>
                                            <alias>odlsli-db</alias>
                                            <run>
                                                <env>
                                                    <MYSQL_ROOT_PASSWORD>itsASecret</MYSQL_ROOT_PASSWORD>
                                                    <MYSQL_USER>sdnctl</MYSQL_USER>
                                                    <MYSQL_PASSWORD>gamma</MYSQL_PASSWORD>
                                                    <MYSQL_DATABASE>sdnctl</MYSQL_DATABASE>
                                                </env>
                                                <network>
                                                    <mode>custom</mode>
                                                    <name>onap</name>
                                                    <alias>dbhost</alias>
                                                    <alias>sdnctldb01</alias>
                                                    <alias>sdnctldb02</alias>
                                                </network>
                                                <ports>
                                                    <port>odlslidb.port:3306</port>
                                                </ports>
                                                <log>
                                                    <enabled>true</enabled>
                                                </log>
                                            </run>
                                        </image>
                                        <image>
                                            <name>${image.name}:${project.docker.latesttagtimestamp.snapshot.version}</name>
                                            <alias>odlsli-container</alias>
                                            <run>
                                                <env>
                                                    <MYSQL_ROOT_PASSWORD>itsASecret</MYSQL_ROOT_PASSWORD>
                                                    <MYSQL_USER>sdnctl</MYSQL_USER>
                                                    <MYSQL_PASSWORD>gamma</MYSQL_PASSWORD>
                                                    <MYSQL_DATABASE>sdnctl</MYSQL_DATABASE>
                                                    <SDNC_CONFIG_DIR>/opt/onap/ccsdk/data/properties</SDNC_CONFIG_DIR>
                                                    <KARAF_CONSOLE_LOG_LEVEL>INFO</KARAF_CONSOLE_LOG_LEVEL>
                                                </env>
                                                <dependsOn>
                                                    <container>odlsli-db</container>
                                                </dependsOn>
                                                <network>
                                                    <mode>custom</mode>
                                                    <name>onap</name>
                                                    <alias>odlsli</alias>
                                                </network>&gt;
                                                <ports>
                                                    <port>odlsli.port:8181</port>
                                                </ports>
                                                <wait>
                                                    <log>all warp coils are now operating at peak efficiency</log>
                                                    <time>120000</time>
                                                </wait>
                                                <log>
                                                    <enabled>true</enabled>
                                                </log>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-it-instance</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>push-images</id>
                                <phase>${docker.push.phase}</phase>
                                <goals>
                                    <goal>build</goal>
                                    <goal>push</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

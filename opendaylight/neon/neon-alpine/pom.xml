<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.onap.ccsdk.distribution</groupId>
		<artifactId>distribution-odl-neon</artifactId>
		<version>1.0.5-SNAPSHOT</version>
	</parent>

	<artifactId>distribution-odl-neon-docker</artifactId>
	<version>1.0.5-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>ccsdk-distribution :: opendaylight :: neon :: docker</name>
	<description>Creates OpenDaylight container</description>
	<organization>
		<name>ONAP</name>
	</organization>

	<properties>
		<image.name>onap/ccsdk-odl-neon-alpine-image</image.name>
		<odl.karaf.artifactId>onap-karaf</odl.karaf.artifactId>
	</properties>
	<build>
		<plugins>


			<plugin>
				<groupId>org.codehaus.groovy.maven</groupId>
				<artifactId>gmaven-plugin</artifactId>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<source>${basedir}/../../../src/main/scripts/TagVersion.groovy</source>
						</configuration>
					</execution>
				</executions>
			</plugin>



			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<id>get-odl-distribution</id>
						<phase>validate</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.opendaylight.integration</groupId>
									<artifactId>${odl.karaf.artifactId}</artifactId>
									<version>${ccsdk.opendaylight.version}</version>
									<type>tar.gz</type>

									<overWrite>true</overWrite>
									<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
								</artifactItem>
							</artifactItems>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-dockerfile</id>
						<goals>
							<goal>copy-resources</goal>
						</goals><!-- here the phase you need -->
						<phase>validate</phase>
						<configuration>
							<outputDirectory>${basedir}/target/docker-stage</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/docker</directory>
									<includes>
										<include>Dockerfile</include>
									</includes>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>src/main/odlscripts</directory>
									<includes>
										<include>*</include>
									</includes>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>



		</plugins>
	</build>

	<profiles>
		<profile>
			<id>docker</id>
			<build>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>0.28.0</version>
						<inherited>false</inherited>
						<configuration>
							<images>
								<image>
									<name>${image.name}</name>
									<build>
										<cleanup>try</cleanup>
										<dockerFileDir>${basedir}/target/docker-stage</dockerFileDir>
										<dockerFile>Dockerfile</dockerFile>
										<tags>
											<tag>${project.docker.latestminortag.version}</tag>
											<tag>${project.docker.latestfulltag.version}</tag>
											<tag>${project.docker.latesttagtimestamp.version}</tag>
										</tags>
									</build>
								</image>
							</images>
						</configuration>
						<executions>
							<execution>
								<id>generate-images</id>
								<phase>package</phase>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>

							<execution>
								<id>push-images</id>
								<phase>${docker.push.phase}</phase>
								<goals>
									<goal>build</goal>
									<goal>push</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

	</profiles>
</project>
